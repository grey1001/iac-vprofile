name: "Vprofile IAC"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_DEFAULT_REGION: eu-west-3
  EKS_CLUSTER: vprofile-eks

jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout cource code
        uses: actions/checkout@v4
      
      - name: Setup Terraform with specified version of runner
        uses: hashicorp/setup-terraform@v2
       
      - name: Terraform destroy
        run: terraform destroy -auto-approve
      # - name: Terraform Init
      #   run: terraform init -backend-config="bucket=${BUCKET_TF_STATE}" -backend-config="region=${AWS_DEFAULT_REGION}"
      #   id: init
      
      # - name: Terraform format
      #   run: terraform fmt
      #   id: fmt

      # - name: Terraform validate
      #   run: terraform validate
      #   id: validate

      # - name: Terraform plan
      #   run: terraform plan -no-color -input=false -out=planfile
      #   id: plan
      #   continue-on-error: true
      
      # - name: Terraform plan status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
      
      # - name: Terraform Apply
      #   id: apple
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false -parallelism=1 planfile
      
      # - name: Configure AWS credentials
      #   if: steps.apple.outcome == 'success'
      #   run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} && aws configure set region ${AWS_DEFAULT_REGION}

      # - name: Get Kubernetes credentials
      #   id: getconfig
      #   if: steps.apple.outcome == 'success'
      #   run: aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${EKS_CLUSTER}

      # - name: Install Ingress controller
      #   if: steps.apple.outcome == 'success'
      #   run: |
      #     kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.0/deploy/static/provider/aws/deploy.yaml
      #     kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=120s
